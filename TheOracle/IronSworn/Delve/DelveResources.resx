<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CardSiteNameFormat" xml:space="preserve">
    <value>**__{0}__**</value>
    <comment>The {0} will be replaced with the site's name. (This is mostly to allow different markdown formating)</comment>
  </data>
  <data name="CardThemeDomainTitleFormat" xml:space="preserve">
    <value>Delve Site - {0} : {1}</value>
    <comment>{0} will be replaced with the themes, and {1} will be replaced with the domains. Odd stuff might happen if there's only a space between the {0} and {1} (if your language has spaces in words normally)</comment>
  </data>
  <data name="DomainHelperTitle" xml:space="preserve">
    <value>Select Domain</value>
  </data>
  <data name="HelperFooterThemeDomain" xml:space="preserve">
    <value>Reply to this message with the number of the action/theme you want. To add multiple themes/domains use a comma to seperate the entries: 1, R</value>
  </data>
  <data name="HelperSiteNameText" xml:space="preserve">
    <value>Input the name of the site or use `Random` to generate the name from the site name oracle tables</value>
  </data>
  <data name="HelperSiteNameTitle" xml:space="preserve">
    <value>Select Site Name</value>
  </data>
  <data name="HelperSiteObjectiveText" xml:space="preserve">
    <value>Input your objective for this delve site. The objective should be tied to your vow.</value>
  </data>
  <data name="HelperSiteObjectiveTitle" xml:space="preserve">
    <value>Select Site Objective</value>
  </data>
  <data name="HelperSiteRankText" xml:space="preserve">
    <value>Either input the full name of the site rank or use the corresponding number:

1 - Troublesome
2 - Dangerous
3 - Formidable
4 - Extreme
5 - Epic</value>
  </data>
  <data name="HelperSiteRankTitle" xml:space="preserve">
    <value>Select Site Rank</value>
  </data>
  <data name="HelperTextFormat" xml:space="preserve">
    <value>{0} - {1}</value>
    <comment>{0} is the value the user is expected to enter (usually a number) and {1} is the name of the theme or domain</comment>
  </data>
  <data name="ListSeperator" xml:space="preserve">
    <value>, </value>
  </data>
  <data name="LocateObjectiveRoll" xml:space="preserve">
    <value>Locate your Objective roll for {0}</value>
    <comment>{0} will be replaced with the name of the delve site.</comment>
  </data>
  <data name="ProgressAmountField" xml:space="preserve">
    <value>Progress Amount</value>
  </data>
  <data name="ProgressTrackField" xml:space="preserve">
    <value>Progress Track</value>
  </data>
  <data name="RandomAliases" xml:space="preserve">
    <value>R,Random,Rand,Roll</value>
    <comment>Comma seperated list of items that are the same as a user input for random. The first item is what will appear in the {0} of the HelperTextFormat, and the second values in the {1}</comment>
  </data>
  <data name="RankField" xml:space="preserve">
    <value>Rank</value>
  </data>
  <data name="RevealDangerRoll" xml:space="preserve">
    <value>Reveal a Danger roll for {0}</value>
    <comment>{0} will be replaced with the name of the delve site.</comment>
  </data>
  <data name="RevealFeatureRoll" xml:space="preserve">
    <value>Reveal a Feature roll for {0}</value>
    <comment>{0} will be replaced with the name of the delve site.</comment>
  </data>
  <data name="RiskZoneField" xml:space="preserve">
    <value>Risk Zone</value>
  </data>
  <data name="RiskZoneHigh" xml:space="preserve">
    <value>High (Formidable or Extreme)</value>
  </data>
  <data name="RiskZoneLow" xml:space="preserve">
    <value>Low (Troublesome or Dangerous)</value>
  </data>
  <data name="RiskZoneMedium" xml:space="preserve">
    <value>Medium (Dangerous or Formidable)</value>
  </data>
  <data name="ThemeHelperTitle" xml:space="preserve">
    <value>Select Theme</value>
  </data>
  <data name="UnknownDomainError" xml:space="preserve">
    <value>The domain you tried to enter '{0}' doesn't have any matching items</value>
    <comment>{0} will be replaced with the user's input</comment>
  </data>
  <data name="UnknownThemeError" xml:space="preserve">
    <value>The theme you tried to enter '{0}' doesn't have any matching items</value>
    <comment>{0} will be replaced with the user's input</comment>
  </data>
  <data name="UserInputTimeoutError" xml:space="preserve">
    <value>You did not reply before the timeout, please start again.</value>
  </data>
</root>